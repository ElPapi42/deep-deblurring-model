import tensorflow as tf
from tensorflow.keras import layers
import base64

from deblurrer.model import FPNGenerator, ImageByteWrapper

generator = FPNGenerator(128)

wrap = ImageByteWrapper(generator)

inputs = tf.constant(
    [
        [base64.b64decode('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')],
        [base64.b64decode('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')],
    ]
)

with tf.device('/cpu:0'):
    outputs = wrap(inputs)

print(outputs[0])